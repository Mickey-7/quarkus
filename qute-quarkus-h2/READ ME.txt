reference : https://www.knowledgefactory.net/2021/10/quarkus-qute-crud-example.html?m=1

---------------------------------------------------------------------------------------
->dependencies
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-jdbc-h2</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-qute</artifactId>
    </dependency>

    autogenerated bolier plate code - SomePage & page.qute.html 
    SomePage class under src/main/java/org.acme
    templates/page.qute.html under src/main/resources
        templates
            page.qute.html
---------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------
->h2 db configuration
    #datasource config
    quarkus.datasource.db-kind=h2
    quarkus.datasource.username=sa
    quarkus.datasource.password=
    quarkus.datasource.jdbc.url=jdbc:h2:mem:testdb

    quarkus.hibernate-orm.database.generation=drop-and-create
    quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect
    quarkus.hibernate-orm.log.sql=true
---------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------
->model User
    @Table(name = "users")
    @Entity
    public class User implements Serializable {
        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        private Long id;
        private String firstName;
        private String lastName;
        private String email;

        public User() {
        }

        public User(Long id, String firstName, String lastName, String email) {
            this.id = id;
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
        }

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public String getFirstName() {
            return firstName;
        }

        public void setFirstName(String firstName) {
            this.firstName = firstName;
        }

        public String getLastName() {
            return lastName;
        }

        public void setLastName(String lastName) {
            this.lastName = lastName;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        @Override
        public String toString() {
            return "User{" +
                    "id=" + id +
                    ", firstName='" + firstName + '\'' +
                    ", lastName='" + lastName + '\'' +
                    ", email='" + email + '\'' +
                    '}';
        }
    }
---------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------
->repository UserRepository
    @Singleton
    public class UserRepository {
        @Inject
        EntityManager entityManager;
        public List<User> getUsers(){
            return entityManager.createQuery(
                    "SELECT u FROM User u"
            ).getResultList();
        }
        public User getUser(Long id){
            return entityManager.find(User.class,id);
        }
        @Transactional(Transactional.TxType.REQUIRED)
        public User addUser(User user){
            entityManager.persist(user);
            return user;
        }
        
        @Transactional(Transactional.TxType.REQUIRED)
        public void updateUser(User user){
            entityManager.merge(user);
        }
        
        @Transactional(Transactional.TxType.REQUIRED)
        public void deleteUser(Long id){
            User user = getUser(id);
            entityManager.remove(user);
        }    
    }
---------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------
->controller UserController
    @Path("/")
    public class UserController {

        // the Template home is under src/main/resources.templates/home.html
        @Inject
        Template home;

        // the Template home is under src/main/resources.templates/createupdate.html
        @Inject
        Template createupdate;

        @Inject
        UserRepository userRepository;

        //render home.html
        @GET
        @Path("/home")
        @Produces(MediaType.TEXT_HTML)
        public TemplateInstance getAllUserView(){
            List<User> users = userRepository.getUsers();
            return home.data(Map.of("users",users));
        }

        //render create user page
        @GET
        @Path("/create")
        @Produces(MediaType.TEXT_HTML)
        public TemplateInstance createUserView(){
            User user = new User();
            Map<String,Object> obj = new HashMap<>();
            obj.put("user",user);
            obj.put("isUpdate",false);
            return createupdate.data(obj);
        }
        //saving of the user then return to view all
        @POST
        @Path("/create")
        @Produces(MediaType.TEXT_HTML)
        @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
        public TemplateInstance createUser(
                @FormParam("firstName") String firstName,
                @FormParam("lastName") String lastName,
                @FormParam("email") String email
        ){
            User user = new User();
            user.setEmail(email);
            user.setFirstName(firstName);
            user.setLastName(lastName);
            userRepository.addUser(user);
            return getAllUserView();
        }

        //delete user then return to view all
        @GET
        @Produces(MediaType.TEXT_HTML)
        @Path("/delete/{id}")
        public TemplateInstance deleteUser(@PathParam("id") Long id){
            userRepository.deleteUser(id);
            return getAllUserView();
        }

        //render update user page
        @GET
        @Produces(MediaType.TEXT_HTML)
        @Path("/update/{id}")
        public TemplateInstance updateUserView(@PathParam("id") Long id){
            User user = userRepository.getUser(id);
            Map<String,Object> obj = new HashMap<>();
            obj.put("user",user);
            obj.put("isUpdate",true);
            return createupdate.data(obj);
        }
        //updating of the user then return to view all
        @POST
        @Path("/update/{id}")
        @Produces(MediaType.TEXT_HTML)
        public TemplateInstance updateUser(
                @FormParam("firstName") String firstName,
                @FormParam("lastName") String lastName,
                @FormParam("email") String email,
                @PathParam("id") Long id
        ){
            User user = new User();
            user.setEmail(email);
            user.setFirstName(firstName);
            user.setLastName(lastName);
            user.setId(id);
            userRepository.updateUser(user);
            return getAllUserView();
        }
    }
---------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------
->home.html - create home.html under src/main/resources/templates/
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <title>Title</title>
    </head>

    <body>
        <h3>QUTE Template</h3>
        <a href="/create">Create User</a>
        <table>
            <thead>
                <tr>
                    <th>Id</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Email</th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                {#for user in users}
                <tr>
                    <td>{user.id}</td>
                    <td>{user.firstName}</td>
                    <td>{user.lastName}</td>
                    <td>{user.email}</td>
                    <td><a href="/update/{user.id}">Update</a></td>
                    <td><a href="/delete/{user.id}">Delete</a></td>
                </tr>
                {/for}
            </tbody>
        </table>

    </body>

    </html>

    the users above are from the api endpoint below :
    //render home.html
    @GET
    @Path("/")
    @Produces(MediaType.TEXT_HTML)
    public TemplateInstance getAllUserView(){
        List<User> users = userRepository.getUsers();
        return home.data(Map.of("users",users));
    }

    the delete is connected to api below :
    //delete user then return to view all
    @GET
    @Produces(MediaType.TEXT_HTML)
    @Path("/delete/{id}")
    public TemplateInstance deleteUser(@PathParam("id") Long id){
        userRepository.deleteUser(id);
        return getAllUserView();
    }


    the update is connected to api below :
    //render update user page
    @GET
    @Produces(MediaType.TEXT_HTML)
    @Path("/update/{id}")
    public TemplateInstance updateUserView(@PathParam("id") Long id){
        User user = userRepository.getUser(id);
        Map<String,Object> obj = new HashMap<>();
        obj.put("user",user);
        obj.put("isUpdate",true);
        return createupdate.data(obj);
    }
---------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------
->createupdate.html - create createupdate.html under src/main/resources/templates
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <title>Title</title>
    </head>

    <body>
        <div>
            <h3>
                {#if !isUpdate} Create {/if}

                {#if isUpdate} Update {/if}

                User
            </h3>
        </div>
        <div>
            <form action="
            {#if isUpdate} /update/{user.id} {/if}  
            {#if !isUpdate} /create {/if}
            " method="post">
                <table>
                    <thead>
                        <tr>
                            <th>Field</th>
                            <th>Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        {#if isUpdate}
                        <tr>
                            <td>{user.id}</td>
                        </tr>
                        {/if}

                        <tr>
                            <th>First Name</th>
                            <td><input type="text" name="firstName" value="{#if user.firstName}{user.firstName}{/if}"></td>
                        </tr>
                        <tr>
                            <th>Last Name</th>
                            <td><input type="text" name="lastName" value="{#if user.lastName}{user.lastName}{/if}"></td>
                        </tr>
                        <tr>
                            <th>Email</th>
                            <td><input type="text" name="email" value="{#if user.email}{user.email}{/if}"></td>
                        </tr>
                    </tbody>
                </table>
                <button type="submit">Save</button>
            </form>
        </div>
    </body>

    </html>

    isUpdate to check if for create or update so that same html page is rendered
---------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------
->test - open web browser then type http://localhost:8080/home
---------------------------------------------------------------------------------------