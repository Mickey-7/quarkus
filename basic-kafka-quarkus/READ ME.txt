reference : https://blog.knoldus.com/apache-kafka-and-quarkus/

------------------------------------------------------------------------------------------------------
->depencies 
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-hibernate-validator</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>
    </dependency>

    remove the autogenerated configuration on application.properties and
    delete the autogenerated class caused by kafka and the test class of that
------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------
->model
    public class Employee {
        @NotBlank(message = "First name cannot be null")
        private String firstName;
        private String lastName;
        @NotBlank(message = "Employee code cannot be null")
        private String empCode;

        public String getFirstName() {
            return firstName;
        }
        public void setFirstName(String firstName) {
            this.firstName = firstName;
        }
        public String getLastName() {
            return lastName;
        }
        public void setLastName(String lastName) {
            this.lastName = lastName;
        }
        public String getEmpCode() {
            return empCode;
        }
        public void setEmpCode(String empCode) {
            this.empCode = empCode;
        }
    }
------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------
->utils - Deserializer/Serializer
    EmployeeDeserializer
    
    public class EmployeeDeserializer implements Deserializer<Employee> {
        private final Logger logger = LoggerFactory.getLogger(EmployeeDeserializer.class);
        private final ObjectMapper objectMapper = new ObjectMapper();

        @Override
        public void configure(Map<String, ?> configs, boolean isKey) {
            Deserializer.super.configure(configs, isKey);
        }
        @Override
        public Employee deserialize(String s, byte[] bytes) {
            try {
                if(bytes == null){
                    logger.error("Null received at deserializing");
                    return null;
                }
                logger.info("Deserializing...");
                return objectMapper.readValue(new String(bytes, StandardCharsets.UTF_8), Employee.class);
            } catch (JsonProcessingException e) {
                throw new SerializationException("Error when deserializing byte[] to Employee");
            }

        }
        @Override
        public void close() {
            Deserializer.super.close();
        }
    }

    EmployeeSerializer

    public class EmployeeSerializer implements Serializer {
        private final Logger logger = LoggerFactory.getLogger(EmployeeSerializer.class);
        private final ObjectMapper objectMapper = new ObjectMapper();
        
        @Override
        public void configure(Map configs, boolean isKey) {
            Serializer.super.configure(configs, isKey);
        }
        @Override
        public byte[] serialize(String s, Object o) {
            try{
                if (o == null){
                    logger.error("Null received at serializing");
                    return new byte[0];
                }
                logger.info("Serializing...");
                return objectMapper.writeValueAsBytes(o);
            }catch (Exception e){
                throw new SerializationException("Error when serializing employee");
            }
        }
        @Override
        public void close() {
            Serializer.super.close();
        }
    }
------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------
->event
    producer/EmployeeProducer

    @ApplicationScoped
    public class EmployeeProducer {
        @Inject
        @Channel("employee-out")
        Emitter<Record<String, Employee>> empEmitter;

        public void createEmployeeEmitter(Employee employee){
            empEmitter.send(Record.of(employee.getEmpCode(), employee));
        }
    }

    consumer/EmployeeConsumer

    @ApplicationScoped
    public class EmployeeConsumer {
        private final Logger logger = LoggerFactory.getLogger(EmployeeConsumer.class);

        @Incoming("employee-in")
        public void addEmployee(Record<String, Employee> employeeRecord){
            logger.info("New employee {} {} joined with employee code {}",
                    employeeRecord.value().getFirstName(),
                    employeeRecord.value().getLastName(),
                    employeeRecord.value().getEmpCode()
            );
        }
    }

    note: the channel names (employee-out & employee-in) should be declared on application.properties
------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------
->application.properties
    kafka.bootstrap.servers=localhost:9092

    mp.messaging.incoming.employee-in.connector=smallrye-kafka
    mp.messaging.incoming.employee-in.topic=employee
    mp.messaging.incoming.employee-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
    mp.messaging.incoming.employee-in.value.deserializer=org.acme.utils.EmployeeDeserializer

    mp.messaging.outgoing.employee-out.connector=smallrye-kafka
    mp.messaging.outgoing.employee-out.topic=employee
    mp.messaging.outgoing.employee-out.key.serializer=org.apache.kafka.common.serialization.StringSerializer
    mp.messaging.outgoing.employee-out.value.serializer=org.acme.utils.EmployeeSerializer
------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------
->running zookeeper
    open cmd then type : cd C:\kafka_2.13-3.3.2

    then execute below : .\bin\windows\zookeeper-server-start.bat .\config\zookeeper.properties

    output on cmd : see kafka.txt for comparison
------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------
->running kafka server
    open cmd then type : cd C:\kafka_2.13-3.3.2

    then execute below : .\bin\windows\kafka-server-start.bat .\config\server.properties

    output on cmd : see kafka.txt for comparison
------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------
->create a topic
    open cmd then type : cd C:\kafka_2.13-3.3.2

    then execute below : .\bin\windows\kafka-topics.bat --create --topic topic_name --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1

    output on cmd : Created topic topic_name.
------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------
->postman
    POST localhost:8080/employee SEND

    {
        "firstName":"Vimal",
        "lastName":"Kumar",
        "empCode":"1823"
    }

    then notice on IntelliJ IDE run console that the employee will be logged

    "C:\Program Files\Java\jdk-15.0.1\bin\java.exe" -Dmaven.multiModuleProjectDirectory=C:\Users\donat\Downloads\kafka-quarkus\code-with-quarkus -Dmaven.home=C:\Users\donat\.m2\wrapper\dists\apache-maven-3.8.6-bin\1ks0nkde5v1pk9vtc31i9d0lcd\apache-maven-3.8.6 -Dclassworlds.conf=C:\Users\donat\.m2\wrapper\dists\apache-maven-3.8.6-bin\1ks0nkde5v1pk9vtc31i9d0lcd\apache-maven-3.8.6\bin\m2.conf "-Dmaven.ext.class.path=C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.3\plugins\maven\lib\maven-event-listener.jar" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.3\lib\idea_rt.jar=56581:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2020.3\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\donat\.m2\wrapper\dists\apache-maven-3.8.6-bin\1ks0nkde5v1pk9vtc31i9d0lcd\apache-maven-3.8.6\boot\plexus-classworlds-2.6.0.jar;C:\Users\donat\.m2\wrapper\dists\apache-maven-3.8.6-bin\1ks0nkde5v1pk9vtc31i9d0lcd\apache-maven-3.8.6\boot\plexus-classworlds.license org.codehaus.classworlds.Launcher -Didea.version=2022.2.3 quarkus:dev
    [INFO] Scanning for projects...
    [INFO] 
    [INFO] ---------------------< org.acme:code-with-quarkus >---------------------
    [INFO] Building code-with-quarkus 1.0.0-SNAPSHOT
    [INFO] --------------------------------[ jar ]---------------------------------
    [INFO] 
    [INFO] --- quarkus-maven-plugin:2.16.0.Final:dev (default-cli) @ code-with-quarkus ---
    [INFO] Invoking org.apache.maven.plugins:maven-resources-plugin:2.6:resources @ code-with-quarkus
    [INFO] Using 'UTF-8' encoding to copy filtered resources.
    [INFO] Copying 2 resources
    [INFO] Invoking io.quarkus.platform:quarkus-maven-plugin:2.16.0.Final:generate-code @ code-with-quarkus
    [INFO] Invoking org.apache.maven.plugins:maven-compiler-plugin:3.10.1:compile @ code-with-quarkus
    [INFO] Nothing to compile - all classes are up to date
    [INFO] Invoking org.apache.maven.plugins:maven-resources-plugin:2.6:testResources @ code-with-quarkus
    [INFO] Using 'UTF-8' encoding to copy filtered resources.
    [INFO] skip non existing resourceDirectory C:\Users\donat\Downloads\kafka-quarkus\code-with-quarkus\src\test\resources
    [INFO] Invoking io.quarkus.platform:quarkus-maven-plugin:2.16.0.Final:generate-code-tests @ code-with-quarkus
    [INFO] Invoking org.apache.maven.plugins:maven-compiler-plugin:3.10.1:testCompile @ code-with-quarkus
    [INFO] Nothing to compile - all classes are up to date
    Listening for transport dt_socket at address: 5005
    Press [h] for more options>
    Tests paused
    Press [r] to resume testing, [h] for more options>
    Press [r] to resume testing, [o] Toggle test output, [h] for more options>
    2023-01-28 09:23:21,964 INFO  [io.qua.sma.dep.processor] (build-63) Generating Jackson serializer for type org.acme.model.Employee
    __  ____  __  _____   ___  __ ____  ______ 
    --/ __ \/ / / / _ | / _ \/ //_/ / / / __/ 
    -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\ \   
    --\___\_\____/_/ |_/_/|_/_/|_|\____/___/   
    2023-01-28 09:23:23,210 INFO  [io.sma.rea.mes.kafka] (Quarkus Main Thread) SRMSG18229: Configured topics for channel 'employee-in': [employee]
    2023-01-28 09:23:23,519 INFO  [io.sma.rea.mes.kafka] (smallrye-kafka-producer-thread-0) SRMSG18258: Kafka producer kafka-producer-employee-out, connected to Kafka brokers 'localhost:9092', is configured to write records to 'employee'
    2023-01-28 09:23:23,557 INFO  [io.sma.rea.mes.kafka] (smallrye-kafka-consumer-thread-0) SRMSG18257: Kafka consumer kafka-consumer-employee-in, connected to Kafka brokers 'localhost:9092', belongs to the 'code-with-quarkus' consumer group and is configured to poll records from [employee]
    2023-01-28 09:23:23,645 INFO  [io.quarkus] (Quarkus Main Thread) code-with-quarkus 1.0.0-SNAPSHOT on JVM (powered by Quarkus 2.16.0.Final) started in 3.005s. Listening on: http://localhost:8080
    2023-01-28 09:23:23,645 INFO  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated.
    2023-01-28 09:23:23,645 INFO  [io.quarkus] (Quarkus Main Thread) Installed features: [cdi, hibernate-validator, kafka-client, resteasy-reactive, resteasy-reactive-jackson, smallrye-context-propagation, smallrye-reactive-messaging, smallrye-reactive-messaging-kafka, vertx]
    2023-01-28 09:23:50,115 INFO  [org.acm.uti.EmployeeSerializer] (smallrye-kafka-producer-thread-0) Serializing...
    2023-01-28 09:23:50,150 INFO  [org.acm.uti.EmployeeDeserializer] (smallrye-kafka-consumer-thread-0) Deserializing...
    2023-01-28 09:23:51,158 INFO  [io.sma.rea.mes.kafka] (vert.x-eventloop-thread-3) SRMSG18256: Initialize record store for topic-partition 'employee-0' at position -1.
    2023-01-28 09:23:51,163 INFO  [org.acm.eve.con.EmployeeConsumer] (vert.x-eventloop-thread-3) New employee Vimal Kumar joined with employee code 1823
------------------------------------------------------------------------------------------------------
